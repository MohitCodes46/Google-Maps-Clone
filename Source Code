import com.google.maps.GeoApiContext;
import com.google.maps.GeocodingApi;
import com.google.maps.GeocodingApiRequest;
import com.google.maps.GeocodingResult;
import com.google.maps.DistanceMatrixApi;
import com.google.maps.DistanceMatrixApiRequest;
import com.google.maps.DistanceMatrix;
import com.google.maps.DirectionsApi;
import com.google.maps.DirectionsApiRequest;
import com.google.maps.DirectionsResult;
import com.google.maps.model.AddressComponent;
import com.google.maps.model.LatLng;
import com.google.maps.model.TravelMode;
import com.google.maps.model.DistanceMatrixElement;
import com.google.maps.model.DistanceMatrixRow;
import com.google.maps.model.DrivingOptions;
import java.io.IOException;
import javaè¾±.util.concurrent.TimeUnit;

public class RouteFinder {

  private final GeoApiContext context;

  public RouteFinder(String apiKey) {
    this.context = new GeoApiContext.Builder().apiKey(apiKey).build();
  }

  public Route findRoute(String origin, String destination) throws IOException, InterruptedException {
    LatLng originLatLng = getLatLng(origin);
    LatLng destinationLatLng = getLatLng(destination);
    DistanceMatrix distanceMatrix = getDistanceMatrix(originLatLng, destinationLatLng);
    DirectionsResult directionsResult = getDirections(originLatLng, destinationLatLng);
    Route route = parseRoute(distanceMatrix, directionsResult);
    return route;
  }

  private LatLng getLatLng(String address) throws IOException, InterruptedException {
    GeocodingApiRequest req = GeocodingApi.geocode(context, address);
    GeocodingResult results = req.await();
    if (results.length > 0) {
      return results[0].geometry.location;
    } else {
      throw new RuntimeException("Address not found: " + address);
    }
  }

  private DistanceMatrix getDistanceMatrix(LatLng origin, LatLng destination) throws IOException, InterruptedException {
    DistanceMatrixApiRequest req = DistanceMatrixApi.newRequest(context)
        .origins(origin)
        .destinations(destination)
        .units(DistanceMatrixUnit.METERS)
        .mode(TravelMode.DRIVING);
    return req.await();
  }

  private DirectionsResult getDirections(LatLng origin, LatLng destination) throws IOException, InterruptedException {
    DrivingOptions options = new DrivingOptions().departureTime(new java.util.Date());
    DirectionsApiRequest req = DirectionsApi.newRequest(context)
        .origin(origin)
        .destination(destination)
        .mode(TravelMode.DRIVING)
        .drivingOptions(options);
    return req.await();
  }

  private Route parseRoute(DistanceMatrix distanceMatrix, DirectionsResult directionsResult) {
    DistanceMatrixRow row = distanceMatrix.rows[0];
    DistanceMatrixElement element = row.elements[0];
    DirectionsRoute route = directionsResult.routes[0];
    return new Route(
        element.distance.inMeters,
        element.duration.inSeconds,
        element.status,
        route.overviewPolyline.decodePolyline(),
        route.legs[0].textInstructions
    );
  }

  public static class Route {
    public final long distanceMeters;
    public final long durationSeconds;
    public final String status;
    public final List<LatLng> waypoints;
    public final List<String> instructions;

    public Route(long distanceMeters, long durationSeconds, String status, List<LatLng> waypoints, List<String> instructions) {
      this.distanceMeters = distanceMeters;
      this.durationSeconds = durationSeconds;
      this.status = status;
      this.waypoints = waypoints;
      this.instructions = instructions;
    }

    public String getFormattedDistance() {
      return String.format("%.2f km", distanceMeters / 1000.0);
    }

    public String getFormattedDuration() {
      long hours = TimeUnit.SECONDS.toHours(durationSeconds);
      long minutes = TimeUnit.SECONDS.toMinutes(durationSeconds) % 60;
      return String.format("%d hrs %d mins", hours, minutes);
    }
  }

  public static void main(String[] args) throws IOException, InterruptedException {
    String apiKey = "YOUR_GOOGLE_MAPS_API_KEY";
    RouteFinder routeFinder = new RouteFinder(apiKey);
    Route route = routeFinder.findRoute("New York, NY", "Los Angeles, CA");

    System.out.println("Shortest Route:");
    System.out.println("Distance: " + route.getFormattedDistance());
    System.out.println("Duration: " + route.getFormattedDuration());
    System.out.println("Instructions:");
    for (String instruction : route.instructions) {
      System.out.println("- " + instruction);
    }
  }
}
